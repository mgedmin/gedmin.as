## Script (Python) "parseTasks"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=strict=False
##title=
##
# Example code:

# Import a standard function, and get the HTML request and response objects.
from Products.PythonScripts.standard import html_quote
request = container.REQUEST
response = request.RESPONSE

errors = []

people = {}
for line in container['tasks.txt'].data.splitlines():
    if line.startswith('#'):
        continue
    if ':' not in line:
        continue
    name, what = line.split(':', 1)
    name = fullinfo = name.strip()
    if '(' in name:
        name = name.split('(', 1)[0].strip()
    persondata = people.setdefault(name, {'name': name, 'fullinfo': fullinfo})
    what = what.strip()
    if '[' not in what:
        if strict:
            errors.append('no "[" in line %s' % line)
        continue
    description, status = what.split('[', 1)
    description = description.strip()
    taskandstatus = status[:-1].strip()
    taskid = 'unknown'
    status = taskandstatus
    for tid in ['1', '2', '3', 'projektukas', 'testukas']:
        if taskandstatus.startswith(tid):
            taskid = tid
            status = taskandstatus[len(tid):]
            break
    if strict and taskid in persondata:
        errors.append('duplicate entry: %s' % line)
    persondata[taskid] = {'taskid': taskid,
                          'description': what.split('[')[0].strip(),
                          'full': what,
                          'chosen': True,
                          'status': status,
                          'done': '+' in status}

if errors:
    raise Exception('\n'.join(errors))
return people
