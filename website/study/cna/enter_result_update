## Script (Python) "enter_result_update"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
from Products.PythonScripts.standard import html_quote
request = container.REQUEST

deadlines = ['2006-04-07', '2006-04-29', '2006-05-19']
holiday_week = 15
date_prefix_sanity_check = '2006-0'

for deadline in deadlines:
    assert deadline.startswith(date_prefix_sanity_check)

taskmap = {}
for row in container.tasks():
    taskmap[row['task']] = row['shorttitle'].decode('UTF-8')


def week_of(date):
    week = DateTime(date).week()
    assert week != holiday_week
    if week < holiday_week:
        week += 1
    return week

def penalty(date, deadline):
    w_of_d = week_of(date)
    diff = week_of(deadline) - w_of_d
    if diff > 3:
        diff = 3
    return diff * 0.1


data = {}
data['statusmsg'] = None
data['havestudent'] = False

data['done'] = []
data['task'] = None
data['which'] = '1'
data['date'] = DateTime().strftime('%Y-%m-%d')
data['delay'] = '0'
data['what'] = ''
data['extra'] = ''
data['notes'] = ''

if 'SELECT' in request.form or 'UPDATE' in request.form:
    gr = request.get('gr')
    student = request.get('student')
    fn = 'data%sgr.csv' % gr
    csvdata = container.parseCSV(fn)
    for row in csvdata:
        if row[2] == student:
            studentrow = row
            while len(row) < 14:
                row += ['']
            data['havestudent'] = True
            data['task'] = row[4].decode('UTF-8')
            if data['task'] in taskmap:
                data['task'] = '%s - %s' % (data['task'], taskmap[data['task']])
            # TODO: if task is a number, convert to title
            data['done'] = []
            choices = ['C++', 'Java', 'C++/Java']
            for n in 1, 2, 3:
                points = row[n*3+3].strip()
                if points:
                    whatexactly = row[n*3+5].split(';')[0].strip()
                    if whatexactly in choices:
                        choices.remove(whatexactly)
                    data['done'].append('%d - %s [%s]' % (n, whatexactly, points))
                    if n < 3:
                        data['which'] = str(n+1)
            if choices:
                data['what'] = choices[0]
            if data['which'] and data['date']:
                pen = penalty(data['date'], deadlines[int(data['which'])-1])
                data['delay'] = '%+.1f' % pen

if 'UPDATE' in request.form:
    data['what'] = request['what']
    data['date'] = request['date']
    if data['which'] and data['date']:
        pen = penalty(data['date'], deadlines[int(data['which'])-1])
        data['delay'] = '%+.1f' % pen
    if data['what'] == 'C++/Java':
        total = '1'
    else:
        total = '1.5'
    total += data['delay']
    notes = data['what']
    if 'multiclient' in request:
        total += '+0.1'
        notes += '; multiklientiškumas'.decode('UTF-8')
    if 'recverr' in request:
        total += '-0.1'
        notes += '; tradicinė recv klaida'.decode('UTF-8')
    if 'extra' in request:
        total += request['extra']
    if 'notes' in request:
        notes += '; ' + request['notes'].decode('UTF-8')
    date = data['date']
    data['havestudent'] = False
    data['statusmsg'] = ('<p>%s (%s gr.), %s užduotis.<br/>'
                         'Įvertinimas: %s<br/>'
                         'Data: %s<br/>'
                         'Pastabos: %s</p>'.decode('UTF-8')
                         % (request['student'].decode('UTF-8'), request['gr'],
                            data['which'], total, date, notes))
    n = int(data['which'])
    studentrow[n*3+3] = total
    studentrow[n*3+4] = date
    studentrow[n*3+5] = notes.encode('UTF-8')
    for row in csvdata:
        while row and not row[-1]:
            del row[-1]
    newdata = '\n'.join([','.join(row) for row in csvdata])
    container[fn].manage_edit('', 'text/x-comma-separated', filedata=newdata)

return data
