## Script (Python) "submit"
##bind container=container
##bind context=context
##bind namespace=
##bind script=script
##bind subpath=traverse_subpath
##parameters=
##title=
##
from Products.PythonScripts.standard import html_quote
request = container.REQUEST

if not request.has_key('submit'):
    return None

students = {}
for s in container.listStudents():
    students[s['login']] = s

SANITY_LIMIT = 100*1024

sender_login = request.get('from', '')
if not sender_login:
    return "Nurodykite savo vardą"
if not students.has_key(sender_login):
    return "Kas tu per vienas, %s?" % html_quote(sender_login)

problem = request.get('problem', '')
if not problem:
    return "Nurodykite užduotį"

lang = request.get('language', '')
if not lang:
    return "Nurodykite kalbą"
if lang not in [l['ext'] for l in container.listLanguages()]:
    return "Kas per kalba yra %s?" % html_quote(lang)

sender = students[request['from']]
name = sender['name']
email = sender['email']
filename = "%s.%s" % (sender['login'], lang)
comments = request.comments
if len(comments) > SANITY_LIMIT:
    return "Per ilgas komentarų laukas (%d > %d)" % (len(comments), SANITY_LIMIT)
if request.file:
    solution = request.file.read()
    solution_filename = request.file.filename
    if request.solution.strip():
        comments += "\n\n-- formoje buvo ir sprendimo failas ir pats sprendimas:\n\n" + request.solution
else:
    solution = request.solution
    solution_filename = None
if not solution.strip():
    return "O kur sprendimas?"
if len(solution) > SANITY_LIMIT:
    return "Per ilgas sprendimas laukas (%d > %d)" % (len(solution), SANITY_LIMIT)

def rfc2047(word):
    result = []
    need_escaping = 0
    for c in word:
        if c.isalpha() or c.isdigit() or c in '!*+-/':
            result.append(c)
        elif c == ' ':
            result.append('_')
        else:
            need_escaping = 1
            result.append('=%02X' % ord(c))
    if need_escaping:
        return "=?UTF-8?Q?%s?=" % ''.join(result)
    else:
        return word

boundary = '----------ooXutubieh3ooco$'
if comments.find(boundary) != -1:
    return "Ei, kas čia bando laužyti mano web serverį?"
if solution.find(boundary) != -1:
    return "Ei, kas čia bando laužyti mano web serverį?"

optional_cc = ""
if request.get('cc', 0):
    optional_cc = "Cc: %s\n" % email

optional_headers = ""
if solution_filename:
    optional_headers = "X-Original-Filename: %s\n" % rfc2047(solution_filename)

msg = ("From: %(name)s <%(email)s>\n"
       "To: marius@pov.lt\n"
       "%(optional_cc)s"
       "Subject: [ICPC] %(problem)s sprendimas: %(filename)s\n"
       "Mime-Version: 1.0\n"
       "Content-Type: multipart/mixed; boundary=\"%(boundary)s\"\n"
       "%(optional_headers)s"
       "\n"
       "--%(boundary)s\n"
       "Content-Type: text/plain; charset=UTF-8\n"
       "Content-Disposition: inline\n"
       "Content-Description: %(problem)s sprendimo komentarai\n"
       "Content-Transfer-Encoding: 8bit\n"
       "\n"
       "%(comments)s\n"
       "\n"
       "--%(boundary)s\n"
       "Content-Type: text/plain; charset=UTF-8\n"
       "Content-Disposition: attachment; filename=\"%(filename)s\"\n"
       "Content-Transfer-Encoding: 8bit\n"
       "\n"
       "%(solution)s\n"
       "\n"
       "--%(boundary)s--\n"
       % {'name': rfc2047(name),
          'email': email,
          'optional_cc': optional_cc,
          'optional_headers': optional_headers,
          'problem': request.problem,
          'filename': filename,
          'boundary': boundary,
          'comments': comments,
          'solution': solution})

container.mailhost.send(msg)
request.response.redirect('%s/index-lt.html' % container.sent.absolute_url())
return None
